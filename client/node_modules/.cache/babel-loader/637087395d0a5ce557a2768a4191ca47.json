{"ast":null,"code":"import { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG, DELETE_LOG, SEARCH_LOGS, SET_CURRENT, UPDATE_LOG, CLEAR_CURRENT, CLEAR_FILTERED } from './types';\nexport const getLogs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch('/api/logs/');\n    const logs = await res.json();\n    dispatch({\n      type: GET_LOGS,\n      payload: logs\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR // payload: err.response.data\n      // payload: err.response.data.msg\n\n    });\n  }\n}; // Add Logs \n\nexport const addLog = log => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch('/api/logs/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(log)\n    });\n    const resData = await res.json();\n    dispatch({\n      type: ADD_LOG,\n      payload: resData\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.data.msg\n    });\n  }\n}; // Delete Log\n\nexport const deleteLog = id => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`/api/logs/${id}`, {\n      method: 'DELETE'\n    });\n    dispatch({\n      type: DELETE_LOG,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      dispatch: err.response.data.msg\n    });\n  }\n}; // Set Current\n\nexport const setCurrent = current => dispatch => {\n  dispatch({\n    type: SET_CURRENT,\n    payload: current\n  });\n}; // Clear Current\n\nexport const clearCurrent = () => dispatch => {\n  dispatch({\n    type: CLEAR_CURRENT\n  });\n}; // Update Log\n\nexport const updateLog = (id, logToEdit) => async dispatch => {\n  try {\n    const res = await fetch(`/api/logs/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(logToEdit)\n    });\n    const resData = await res.json();\n    dispatch({\n      type: UPDATE_LOG,\n      payload: resData\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      dispatch: err.response.data.msg\n    });\n  }\n}; // Search Logs\n\nexport const searchLogs = text => dispatch => {\n  dispatch({\n    type: SEARCH_LOGS,\n    payload: text\n  });\n}; // Clear filtered\n\nexport const clearFiltered = () => dispatch => {\n  dispatch({\n    type: CLEAR_FILTERED\n  });\n}; // Set loading \n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/macbookpro/REACT/TECH LOG HEROKU DEPLOYMENT/client/src/actions/logActions.js"],"names":["GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","SEARCH_LOGS","SET_CURRENT","UPDATE_LOG","CLEAR_CURRENT","CLEAR_FILTERED","getLogs","dispatch","setLoading","res","fetch","logs","json","type","payload","err","addLog","log","method","headers","body","JSON","stringify","resData","response","data","msg","deleteLog","id","setCurrent","current","clearCurrent","updateLog","logToEdit","searchLogs","text","clearFiltered"],"mappings":"AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,OAJF,EAKEC,UALF,EAMEC,WANF,EAOEC,WAPF,EAQEC,UARF,EASEC,aATF,EAUEC,cAVF,QAWO,SAXP;AAeA,OAAO,MAAMC,OAAO,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAE/C,MAAI;AACFC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,YAAD,CAAvB;AAEA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEjB,QADC;AAEPkB,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAKD,GAZD,CAYE,OAAOI,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEf,UADC,CAEP;AACA;;AAHO,KAAD,CAAR;AAMD;AAEF,CAvBM,C,CAyBP;;AACA,OAAO,MAAMkB,MAAM,GAAIC,GAAD,IAAS,MAAOV,QAAP,IAAoB;AAEjD,MAAI;AAEFC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,YAAD,EAAe;AACpCQ,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF2B;AAGpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,GAAf;AAH8B,KAAf,CAAvB;AAMA,UAAMM,OAAO,GAAG,MAAMd,GAAG,CAACG,IAAJ,EAAtB;AAGAL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEd,OADC;AAEPe,MAAAA,OAAO,EAAES;AAFF,KAAD,CAAR;AAOD,GApBD,CAoBE,OAAOR,GAAP,EAAY;AAEZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEf,UADC;AAEPgB,MAAAA,OAAO,EAAEC,GAAG,CAACS,QAAJ,CAAaC,IAAb,CAAkBC;AAFpB,KAAD,CAAR;AAKD;AAGF,CAhCM,C,CAkCP;;AACA,OAAO,MAAMC,SAAS,GAAIC,EAAD,IAAQ,MAAOrB,QAAP,IAAoB;AAEnD,MAAI;AAEFC,IAAAA,UAAU;AAEV,UAAME,KAAK,CAAE,aAAYkB,EAAG,EAAjB,EAAoB;AAC7BV,MAAAA,MAAM,EAAE;AADqB,KAApB,CAAX;AAIAX,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEb,UADC;AAEPc,MAAAA,OAAO,EAAEc;AAFF,KAAD,CAAR;AAKD,GAbD,CAaE,OAAOb,GAAP,EAAY;AAEZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEf,UADC;AAEPS,MAAAA,QAAQ,EAAEQ,GAAG,CAACS,QAAJ,CAAaC,IAAb,CAAkBC;AAFrB,KAAD,CAAR;AAKD;AAEF,CAxBM,C,CA0BP;;AACA,OAAO,MAAMG,UAAU,GAAIC,OAAD,IAAcvB,QAAD,IAAc;AAEnDA,EAAAA,QAAQ,CAAC;AACPM,IAAAA,IAAI,EAAEX,WADC;AAEPY,IAAAA,OAAO,EAAEgB;AAFF,GAAD,CAAR;AAKD,CAPM,C,CASP;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOxB,QAAD,IAAc;AAE9CA,EAAAA,QAAQ,CAAC;AACPM,IAAAA,IAAI,EAAET;AADC,GAAD,CAAR;AAID,CANM,C,CAQP;;AACA,OAAO,MAAM4B,SAAS,GAAG,CAACJ,EAAD,EAAKK,SAAL,KAAmB,MAAO1B,QAAP,IAAoB;AAE9D,MAAI;AACF,UAAME,GAAG,GAAG,MAAMC,KAAK,CAAE,aAAYkB,EAAG,EAAjB,EAAoB;AACzCV,MAAAA,MAAM,EAAE,KADiC;AAEzCC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFgC;AAGzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeW,SAAf;AAHmC,KAApB,CAAvB;AAMA,UAAMV,OAAO,GAAG,MAAMd,GAAG,CAACG,IAAJ,EAAtB;AAEAL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEV,UADC;AAEPW,MAAAA,OAAO,EAAES;AAFF,KAAD,CAAR;AAMD,GAfD,CAeE,OAAOR,GAAP,EAAY;AAEZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEf,UADC;AAEPS,MAAAA,QAAQ,EAAEQ,GAAG,CAACS,QAAJ,CAAaC,IAAb,CAAkBC;AAFrB,KAAD,CAAR;AAKD;AAEF,CA1BM,C,CA4BP;;AACA,OAAO,MAAMQ,UAAU,GAAIC,IAAD,IAAW5B,QAAD,IAAc;AAEhDA,EAAAA,QAAQ,CAAC;AACPM,IAAAA,IAAI,EAAEZ,WADC;AAEPa,IAAAA,OAAO,EAAEqB;AAFF,GAAD,CAAR;AAID,CANM,C,CAQP;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAO7B,QAAD,IAAc;AAE/CA,EAAAA,QAAQ,CAAC;AACPM,IAAAA,IAAI,EAAER;AADC,GAAD,CAAR;AAGD,CALM,C,CAUP;;AACA,OAAO,MAAMG,UAAU,GAAG,MAAM;AAC9B,SAAO;AACLK,IAAAA,IAAI,EAAEhB;AADD,GAAP;AAGD,CAJM","sourcesContent":["import {\n  GET_LOGS,\n  SET_LOADING,\n  LOGS_ERROR,\n  ADD_LOG,\n  DELETE_LOG,\n  SEARCH_LOGS,\n  SET_CURRENT,\n  UPDATE_LOG,\n  CLEAR_CURRENT,\n  CLEAR_FILTERED\n} from './types';\n\n\n\nexport const getLogs = () => async (dispatch) => {\n\n  try {\n    setLoading();\n\n    const res = await fetch('/api/logs/');\n\n    const logs = await res.json();\n\n    dispatch({\n      type: GET_LOGS,\n      payload: logs\n    });\n\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      // payload: err.response.data\n      // payload: err.response.data.msg\n    })\n\n  }\n\n}\n\n// Add Logs \nexport const addLog = (log) => async (dispatch) => {\n\n  try {\n\n    setLoading()\n\n    const res = await fetch('/api/logs/', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(log)\n    });\n\n    const resData = await res.json();\n\n\n    dispatch({\n      type: ADD_LOG,\n      payload: resData\n    })\n\n\n\n  } catch (err) {\n\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.data.msg\n    })\n\n  }\n\n\n}\n\n// Delete Log\nexport const deleteLog = (id) => async (dispatch) => {\n\n  try {\n\n    setLoading();\n\n    await fetch(`/api/logs/${id}`, {\n      method: 'DELETE'\n    });\n\n    dispatch({\n      type: DELETE_LOG,\n      payload: id\n    })\n\n  } catch (err) {\n\n    dispatch({\n      type: LOGS_ERROR,\n      dispatch: err.response.data.msg\n    })\n\n  }\n\n}\n\n// Set Current\nexport const setCurrent = (current) => (dispatch) => {\n\n  dispatch({\n    type: SET_CURRENT,\n    payload: current\n  })\n\n}\n\n// Clear Current\nexport const clearCurrent = () => (dispatch) => {\n\n  dispatch({\n    type: CLEAR_CURRENT\n  })\n\n}\n\n// Update Log\nexport const updateLog = (id, logToEdit) => async (dispatch) => {\n\n  try {\n    const res = await fetch(`/api/logs/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(logToEdit)\n    });\n\n    const resData = await res.json();\n\n    dispatch({\n      type: UPDATE_LOG,\n      payload: resData\n    })\n\n\n  } catch (err) {\n\n    dispatch({\n      type: LOGS_ERROR,\n      dispatch: err.response.data.msg\n    })\n\n  }\n\n}\n\n// Search Logs\nexport const searchLogs = (text) => (dispatch) => {\n\n  dispatch({\n    type: SEARCH_LOGS,\n    payload: text\n  })\n}\n\n// Clear filtered\nexport const clearFiltered = () => (dispatch) => {\n\n  dispatch({\n    type: CLEAR_FILTERED\n  })\n}\n\n\n\n\n// Set loading \nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}