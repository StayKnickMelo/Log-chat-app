{"ast":null,"code":"import { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG, DELETE_LOG, SET_CURRENT, UPDATE_LOG, CLEAR_CURRENT, SEARCH_LOGS, CLEAR_FILTERED } from '../actions/types';\nconst initialState = {\n  logs: null,\n  current: null,\n  loading: false,\n  filtered: null,\n  error: null\n};\n\nconst logReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case GET_LOGS:\n      return { ...state,\n        loading: false,\n        logs: action.payload\n      };\n\n    case ADD_LOG:\n      return { ...state,\n        logs: [action.payload, ...state.logs],\n        loading: false\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case UPDATE_LOG:\n      return { ...state,\n        logs: state.logs.map(log => log._id === action.payload._id ? action.payload : log)\n      };\n\n    case DELETE_LOG:\n      return { ...state,\n        logs: state.logs.filter(log => log._id !== action.payload),\n        loading: false\n      };\n\n    case SEARCH_LOGS:\n      return { ...state,\n        filtered: state.logs.filter(log => {\n          const regEx = new RegExp(action.payload, 'gi');\n          return log.message.match(regEx) || log.tech.match(regEx);\n        })\n      };\n\n    case CLEAR_FILTERED:\n      return { ...state,\n        filtered: null\n      };\n\n    case LOGS_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default logReducer;","map":{"version":3,"sources":["/Users/macbookpro/REACT/TECH LOG HEROKU DEPLOYMENT/client/src/reducers/logReducer.js"],"names":["GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","SET_CURRENT","UPDATE_LOG","CLEAR_CURRENT","SEARCH_LOGS","CLEAR_FILTERED","initialState","logs","current","loading","filtered","error","logReducer","state","action","type","payload","map","log","_id","filter","regEx","RegExp","message","match","tech"],"mappings":"AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,OAJF,EAKEC,UALF,EAMEC,WANF,EAOEC,UAPF,EAQEC,aARF,EASEC,WATF,EAUEC,cAVF,QAWO,kBAXP;AAeA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,QAAQ,EAAE,IAJS;AAKnBC,EAAAA,KAAK,EAAE;AALY,CAArB;;AAUA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKlB,WAAL;AACE,aAAO,EACL,GAAGgB,KADE;AAELJ,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKb,QAAL;AACE,aAAO,EACL,GAAGiB,KADE;AAELJ,QAAAA,OAAO,EAAE,KAFJ;AAGLF,QAAAA,IAAI,EAAEO,MAAM,CAACE;AAHR,OAAP;;AAKF,SAAKjB,OAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELN,QAAAA,IAAI,EAAE,CAACO,MAAM,CAACE,OAAR,EAAiB,GAAGH,KAAK,CAACN,IAA1B,CAFD;AAGLE,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAKR,WAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELL,QAAAA,OAAO,EAAEM,MAAM,CAACE;AAFX,OAAP;;AAIF,SAAKb,aAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELL,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKN,UAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELN,QAAAA,IAAI,EAAEM,KAAK,CAACN,IAAN,CAAWU,GAAX,CAAeC,GAAG,IAAIA,GAAG,CAACC,GAAJ,KAAYL,MAAM,CAACE,OAAP,CAAeG,GAA3B,GAAiCL,MAAM,CAACE,OAAxC,GAAkDE,GAAxE;AAFD,OAAP;;AAIF,SAAKlB,UAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELN,QAAAA,IAAI,EAAEM,KAAK,CAACN,IAAN,CAAWa,MAAX,CAAkBF,GAAG,IAAIA,GAAG,CAACC,GAAJ,KAAYL,MAAM,CAACE,OAA5C,CAFD;AAGLP,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKL,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELH,QAAAA,QAAQ,EAAEG,KAAK,CAACN,IAAN,CAAWa,MAAX,CAAkBF,GAAG,IAAI;AACjC,gBAAMG,KAAK,GAAG,IAAIC,MAAJ,CAAWR,MAAM,CAACE,OAAlB,EAA2B,IAA3B,CAAd;AACA,iBAAOE,GAAG,CAACK,OAAJ,CAAYC,KAAZ,CAAkBH,KAAlB,KAA4BH,GAAG,CAACO,IAAJ,CAASD,KAAT,CAAeH,KAAf,CAAnC;AACD,SAHS;AAFL,OAAP;;AAOF,SAAKhB,cAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELH,QAAAA,QAAQ,EAAE;AAFL,OAAP;;AAKF,SAAKZ,UAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFT,OAAP;;AAMF;AACE,aAAOH,KAAP;AA9DJ;AAiED,CAlED;;AAoEA,eAAeD,UAAf","sourcesContent":["import {\n  GET_LOGS,\n  SET_LOADING,\n  LOGS_ERROR,\n  ADD_LOG,\n  DELETE_LOG,\n  SET_CURRENT,\n  UPDATE_LOG,\n  CLEAR_CURRENT,\n  SEARCH_LOGS,\n  CLEAR_FILTERED\n} from '../actions/types'\n\n\n\nconst initialState = {\n  logs: null,\n  current: null,\n  loading: false,\n  filtered: null,\n  error: null\n}\n\n\n\nconst logReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true\n      }\n    case GET_LOGS:\n      return {\n        ...state,\n        loading: false,\n        logs: action.payload\n      }\n    case ADD_LOG:\n      return {\n        ...state,\n        logs: [action.payload, ...state.logs],\n        loading: false\n\n      }\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload\n      }\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null\n      }\n    case UPDATE_LOG:\n      return {\n        ...state,\n        logs: state.logs.map(log => log._id === action.payload._id ? action.payload : log)\n      }\n    case DELETE_LOG:\n      return {\n        ...state,\n        logs: state.logs.filter(log => log._id !== action.payload),\n        loading: false\n      }\n    case SEARCH_LOGS:\n      return {\n        ...state,\n        filtered: state.logs.filter(log => {\n          const regEx = new RegExp(action.payload, 'gi');\n          return log.message.match(regEx) || log.tech.match(regEx)\n        })\n      }\n    case CLEAR_FILTERED:\n      return {\n        ...state,\n        filtered: null\n\n      }\n    case LOGS_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      }\n\n\n    default:\n      return state\n  }\n\n}\n\nexport default logReducer"]},"metadata":{},"sourceType":"module"}